name: Tweet Temperature of Laguna Verde

on:
  schedule:
    - cron: '*/30 * * * *'  # Cada 30 minutos
  workflow_dispatch:  # Permite ejecutarlo manualmente

jobs:
  tweet:
    runs-on: ubuntu-latest
    environment: TWITTER
    steps:
      - name: Debug Secrets
        run: |
          echo "Verificando secretos de Twitter..."
          if [ -z "${{ secrets.TWITTER_API_KEY }}" ]; then echo "❌ TWITTER_API_KEY está vacío"; exit 1; fi
          if [ -z "${{ secrets.TWITTER_API_SECRET }}" ]; then echo "❌ TWITTER_API_SECRET está vacío"; exit 1; fi
          if [ -z "${{ secrets.TWITTER_ACCESS_TOKEN }}" ]; then echo "❌ TWITTER_ACCESS_TOKEN está vacío"; exit 1; fi
          if [ -z "${{ secrets.TWITTER_ACCESS_SECRET }}" ]; then echo "❌ TWITTER_ACCESS_SECRET está vacío"; exit 1; fi
          echo "✅ Todos los secretos están configurados correctamente."

      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Fetch Temperature from API
        id: fetch_temp
        run: |
          API_URL="https://nginx-cms.onrender.com/api/scraper"
          TEMP=$(curl -s "$API_URL" | jq -r '.res.temperature' | xargs)  # Extraer y limpiar temperatura
          if [ -z "$TEMP" ]; then echo "❌ Error: No se pudo obtener la temperatura."; exit 1; fi
          echo "🌡️ Temperatura obtenida: $TEMP"
          echo "TEMP=$TEMP" >> $GITHUB_ENV

      - name: Post Tweet using Twitter API v2 (OAuth 2.0 User Context)
        env:
          TWITTER_API_KEY: ${{ secrets.TWITTER_API_KEY }}
          TWITTER_API_SECRET: ${{ secrets.TWITTER_API_SECRET }}
          TWITTER_ACCESS_TOKEN: ${{ secrets.TWITTER_ACCESS_TOKEN }}
          TWITTER_ACCESS_SECRET: ${{ secrets.TWITTER_ACCESS_SECRET }}
        run: |
          echo "Publicando tweet..."
          echo "🌡️ La temperatura actual en Laguna Verde es de ${TEMP} #LagunaVerde #Clima" > tweet.txt
          
          pip install requests requests_oauthlib

          python - <<EOF
          import os
          import requests
          import json
          from requests_oauthlib import OAuth1Session

          # Cargar credenciales de GitHub Secrets
          API_KEY = os.getenv('TWITTER_API_KEY')
          API_SECRET = os.getenv('TWITTER_API_SECRET')
          ACCESS_TOKEN = os.getenv('TWITTER_ACCESS_TOKEN')
          ACCESS_SECRET = os.getenv('TWITTER_ACCESS_SECRET')

          # Verificar que todas las claves existen
          if not all([API_KEY, API_SECRET, ACCESS_TOKEN, ACCESS_SECRET]):
              print("❌ Error: Faltan credenciales de Twitter.")
              exit(1)

          # Leer el tweet
          with open('tweet.txt', 'r') as f:
              TWEET_TEXT = f.read().strip()

          # Configurar autenticación con OAuth 1.0a
          twitter = OAuth1Session(API_KEY, API_SECRET, ACCESS_TOKEN, ACCESS_SECRET)

          # Configurar la API de Twitter
          url = "https://api.twitter.com/2/tweets"
          headers = {"Content-Type": "application/json"}
          payload = json.dumps({"text": TWEET_TEXT})

          # Hacer el POST con autenticación
          response = twitter.post(url, headers=headers, data=payload)

          # Verificar la respuesta de la API
          if response.status_code == 201:
              print("✅ Tweet enviado correctamente:", TWEET_TEXT)
          else:
              print("❌ Error al enviar el tweet:", response.text)
              exit(1)
          EOF
